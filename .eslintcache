[{"/Users/debbie/IronhackLab/Projects/minesweeper/src/index.tsx":"1","/Users/debbie/IronhackLab/Projects/minesweeper/src/components/App/index.tsx":"2","/Users/debbie/IronhackLab/Projects/minesweeper/src/components/NumberDisplay/index.tsx":"3","/Users/debbie/IronhackLab/Projects/minesweeper/src/utils/index.ts":"4","/Users/debbie/IronhackLab/Projects/minesweeper/src/components/Button/index.tsx":"5","/Users/debbie/IronhackLab/Projects/minesweeper/src/constants/index.ts":"6","/Users/debbie/IronhackLab/Projects/minesweeper/src/types/index.ts":"7"},{"size":181,"mtime":1606850133684,"results":"8","hashOfConfig":"9"},{"size":4832,"mtime":1607034666522,"results":"10","hashOfConfig":"9"},{"size":294,"mtime":1606857759034,"results":"11","hashOfConfig":"9"},{"size":3223,"mtime":1607027378058,"results":"12","hashOfConfig":"9"},{"size":1380,"mtime":1607032911063,"results":"13","hashOfConfig":"9"},{"size":84,"mtime":1606859422594,"results":"14","hashOfConfig":"9"},{"size":466,"mtime":1607031577874,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"11p3u94",{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/debbie/IronhackLab/Projects/minesweeper/src/index.tsx",[],["33","34"],"/Users/debbie/IronhackLab/Projects/minesweeper/src/components/App/index.tsx",["35","36","37"],"import React, {useState, useEffect} from \"react\";\nimport Button from \"../Button\";\nimport NumberDisplay from \"../NumberDisplay\";\nimport {generateCells} from \"../../utils\";\nimport {Cell, CellState, CellValue, Face} from '../../types';\n\nimport \"./App.scss\";\n\nconst App: React.FC = () => {\nconst [cells, setCells] = useState<Cell[][]>(generateCells());\nconst [face, setFace] = useState<Face>(Face.smile);\nconst [time, setTime] = useState<number>(0);\nconst [live, setLive] = useState<boolean>(false);\nconst [bombCounter, setBombCounter] = useState<number>(10);\nconst [hasLost, setHasLost] = useState<boolean>(false);\nconst [hasWon, setHasWon] = useState<boolean>(false);\n\n// Controls EventListeners \nuseEffect(() => {\n    const handleMouseDown = (): void => {\n      setFace(Face.oh);\n    };\n\n    const handleMouseUp = (): void => {\n      setFace(Face.smile);\n    };\n\n    window.addEventListener(\"mousedown\", handleMouseDown);\n    window.addEventListener(\"mouseup\", handleMouseUp);\n\n    // to avoid wasting memory I clean the eventListeners\n    return () => {\n      window.removeEventListener(\"mousedown\", handleMouseDown);\n      window.removeEventListener(\"mouseup\", handleMouseUp);\n\n    };\n  }, []);\n\n\n  // Set timer (start, increase)\n  useEffect(() => {\n    if (live && time < 999) {\n      const timer = setInterval(() => {\n        setTime(time + 1);\n      }, 1000);\n\n      return () => {\n        clearInterval(timer);\n      };\n    }\n  }, [live, time]);\n\n  const handleClick = (rowParam: number, colParam: number) =>(): void =>{\n    let newCells = cells.slice();\n    \n    //start game\n    if (!live){\n        setLive(true)\n    }\n\n\n    const currentCell = newCells[rowParam][colParam];\n\n    // 1. if a flagged cell or already revealed cell is clicked -> do nothing\n    if ([CellState.flagged, CellState.visible].includes(currentCell.state)) {\n      return;\n    }\n\n    // 2. if cell with  bomb is clicked -> game over\n    if (currentCell.value === CellValue.bomb) {\n      setHasLost(true);\n      newCells[rowParam][colParam].red = true;\n      //newCells = showAllBombs();\n      setCells(newCells);\n      return;\n\n    // 3. if empty is clicked -> reveal all empty cells\n    } else if (currentCell.value === CellValue.none) {\n      //newCells = openMultipleCells(newCells, rowParam, colParam);\n    } else {\n    \n    // 4. if a number is clicked -> reveal the number\n      newCells[rowParam][colParam].state = CellState.visible;\n    }\n  }\n\n  \n\n\n\n\n\n  \n  \n// handle RIGHT CLICK -> set flags ðŸš© \nconst handleCellContext = (\n    rowParam: number,\n    colParam: number\n) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void => { \n    e.preventDefault() //to stop the rightclick menu from opening \n\n    // if the game is not started it doesn't allow to put flags\n    if (!live){\n        return\n    }\n\n    const currentCells = cells.slice();\n    const currentCell = cells[rowParam][colParam];\n\n    \n\n    // 1. if content cell revealed, do nothing\n    if (currentCell.state === CellState.visible) {\n        return;\n\n    // 2. if content cell still hidden, add a flag\n    } else if (currentCell.state === CellState.open) {\n\n        if (bombCounter > 0){\n            setBombCounter(bombCounter - 1);\n            currentCells[rowParam][colParam].state = CellState.flagged;\n            setCells(currentCells);\n            setBombCounter(bombCounter - 1);\n        }\n        return\n\n    // 3. if cell is flagged, the flag is removed\n    } else if (currentCell.state === CellState.flagged) {\n        if (bombCounter < 10){\n            currentCells[rowParam][colParam].state = CellState.open;\n            setCells(currentCells);\n            setBombCounter(bombCounter + 1);\n        }\n        return\n        \n      }\n}\n\n  // Reset Game -> ðŸ¤“\n  const handleFaceClick = (): void => {\n    setLive(false);\n    setTime(0);\n    setCells(generateCells());\n    // setHasLost(false);\n    // setHasWon(false);\n  };\n\n  // Create matrix\nconst renderCells = (): React.ReactNode => {\nreturn cells.map((row, rowIndex) => row.map((cell, colIndex)=> <Button\n    col={colIndex}\n    key={`${rowIndex}-${colIndex}`}\n    row={rowIndex}\n    state={cell.state}\n    value={cell.value}\n    onClick={handleClick}\n    onContext={handleCellContext}\n/>))\n}\n\n    return (\n        <div className=\"App\">\n             <div className=\"Header\">\n                 {/* number of bombs display */}\n                 <NumberDisplay value={bombCounter}/>\n\n                  {/* Face button */}\n                 <div className='face' onClick={handleFaceClick}><span role=\"img\" aria-label='face'>{face}</span></div>\n\n                 {/* timer display*/}\n                 <NumberDisplay value={time}/>\n                 </div>\n\n             <div className=\"Body\">\n                  {/* matrix */}\n                 {renderCells()}\n             </div>\n        </div>\n    )\n}\n\nexport default App","/Users/debbie/IronhackLab/Projects/minesweeper/src/components/NumberDisplay/index.tsx",[],"/Users/debbie/IronhackLab/Projects/minesweeper/src/utils/index.ts",[],"/Users/debbie/IronhackLab/Projects/minesweeper/src/components/Button/index.tsx",[],"/Users/debbie/IronhackLab/Projects/minesweeper/src/constants/index.ts",[],["38","39"],"/Users/debbie/IronhackLab/Projects/minesweeper/src/types/index.ts",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":15,"column":8,"nodeType":"46","messageId":"47","endLine":15,"endColumn":15},{"ruleId":"44","severity":1,"message":"48","line":16,"column":8,"nodeType":"46","messageId":"47","endLine":16,"endColumn":14},{"ruleId":"44","severity":1,"message":"49","line":16,"column":16,"nodeType":"46","messageId":"47","endLine":16,"endColumn":25},{"ruleId":"40","replacedBy":"50"},{"ruleId":"42","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"@typescript-eslint/no-unused-vars","'hasLost' is assigned a value but never used.","Identifier","unusedVar","'hasWon' is assigned a value but never used.","'setHasWon' is assigned a value but never used.",["52"],["53"],"no-global-assign","no-unsafe-negation"]