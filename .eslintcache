[{"/Users/debbie/IronhackLab/Projects/minesweeper/src/index.tsx":"1","/Users/debbie/IronhackLab/Projects/minesweeper/src/components/App/index.tsx":"2","/Users/debbie/IronhackLab/Projects/minesweeper/src/components/NumberDisplay/index.tsx":"3","/Users/debbie/IronhackLab/Projects/minesweeper/src/utils/index.ts":"4","/Users/debbie/IronhackLab/Projects/minesweeper/src/components/Button/index.tsx":"5","/Users/debbie/IronhackLab/Projects/minesweeper/src/constants/index.ts":"6","/Users/debbie/IronhackLab/Projects/minesweeper/src/types/index.ts":"7","/Users/debbie/IronhackLab/Projects/minesweeper/src/hooks/setUpGame.tsx":"8","/Users/debbie/IronhackLab/Projects/minesweeper/src/components/GameBoard/index.tsx":"9","/Users/debbie/IronhackLab/Projects/minesweeper/src/components/Navbar/index.tsx":"10","/Users/debbie/IronhackLab/Projects/minesweeper/src/components/Menu/index.tsx":"11","/Users/debbie/IronhackLab/Projects/minesweeper/src/components/context/GameContext.tsx":"12"},{"size":181,"mtime":1606850133684,"results":"13","hashOfConfig":"14"},{"size":505,"mtime":1608991600649,"results":"15","hashOfConfig":"14"},{"size":294,"mtime":1606857759034,"results":"16","hashOfConfig":"14"},{"size":7373,"mtime":1608994275706,"results":"17","hashOfConfig":"14"},{"size":1379,"mtime":1607782459339,"results":"18","hashOfConfig":"14"},{"size":84,"mtime":1608991651872,"results":"19","hashOfConfig":"14"},{"size":770,"mtime":1608985326137,"results":"20","hashOfConfig":"14"},{"size":6846,"mtime":1608994250370,"results":"21","hashOfConfig":"14"},{"size":936,"mtime":1608991541265,"results":"22","hashOfConfig":"14"},{"size":388,"mtime":1608136857432,"results":"23","hashOfConfig":"14"},{"size":1359,"mtime":1608994545579,"results":"24","hashOfConfig":"14"},{"size":636,"mtime":1608992850065,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"11p3u94",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},"/Users/debbie/IronhackLab/Projects/minesweeper/src/index.tsx",[],["54","55"],"/Users/debbie/IronhackLab/Projects/minesweeper/src/components/App/index.tsx",[],"/Users/debbie/IronhackLab/Projects/minesweeper/src/components/NumberDisplay/index.tsx",[],"/Users/debbie/IronhackLab/Projects/minesweeper/src/utils/index.ts",[],"/Users/debbie/IronhackLab/Projects/minesweeper/src/components/Button/index.tsx",[],["56","57"],"/Users/debbie/IronhackLab/Projects/minesweeper/src/constants/index.ts",[],"/Users/debbie/IronhackLab/Projects/minesweeper/src/types/index.ts",[],"/Users/debbie/IronhackLab/Projects/minesweeper/src/hooks/setUpGame.tsx",["58"],"import React, {useState, useEffect} from \"react\";\nimport Button from \"../components/Button\";\nimport {generateCells, openMultipleCells} from \"../utils\";\nimport {Cell, CellState, CellValue, Face} from '../types';\n\nimport { useGameContext } from \"../components/context/GameContext\";\n\n\nexport const SetUpGame = ()=> {\nconst {level} = useGameContext()!\nconst [MAX_ROWS, setMAX_ROWS]= useState<number>(9)\nconst [MAX_COLS, setMAX_COLS]= useState<number>(9)\nconst [NO_OF_BOMBS, setNO_OF_BOMBS]= useState<number>(10)\nconst [cells, setCells] = useState<Cell[][]>(generateCells(MAX_ROWS, MAX_COLS, NO_OF_BOMBS));\nconst [face, setFace] = useState<Face>(Face.smile);\nconst [time, setTime] = useState<number>(0);\nconst [live, setLive] = useState<boolean>(false);\nconst [bombCounter, setBombCounter] = useState<number>(NO_OF_BOMBS);\nconst [hasLost, setHasLost] = useState<boolean>(false);\nconst [hasWon, setHasWon] = useState<boolean>(false);\nconst [classBody, setclassBody]=useState<string>('Body-beginner')\n\n\n\n// Controls EventListeners \nuseEffect(() => {\n    const handleMouseDown = (): void => {\n      setFace(Face.oh);\n    };\n\n    const handleMouseUp = (): void => {\n      setFace(Face.smile);\n    };\n\n    window.addEventListener(\"mousedown\", handleMouseDown);\n    window.addEventListener(\"mouseup\", handleMouseUp);\n\n    // to avoid wasting memory I clean the eventListeners\n    return () => {\n      window.removeEventListener(\"mousedown\", handleMouseDown);\n      window.removeEventListener(\"mouseup\", handleMouseUp);\n\n    };\n  }, []);\n\n// set up grid and numer of bombs according to selected level - beginner is default\n  useEffect(() => {\n    if (level === 'beginner'){\n      setclassBody('Body-beginner');\n      setMAX_COLS(9);\n      setMAX_ROWS(9)\n      setNO_OF_BOMBS(10)\n    }\n    if (level === 'intermediate'){\n      setclassBody('Body-intermediate')\n      setMAX_COLS(16);\n      setMAX_ROWS(16)\n      setNO_OF_BOMBS(40) \n    }\n    if (level === 'advanced'){\n      setclassBody('Body-advanced')\n      setMAX_COLS(16);\n      setMAX_ROWS(30)\n      setNO_OF_BOMBS(99) \n    }\n   \n  }, [level])\n\n  useEffect(() => {\n    handleFaceClick()\n    console.log(cells)\n  }, [NO_OF_BOMBS])\n\n\n  // Reset Game -> ðŸ¤“\n  const handleFaceClick = (): void => {\n    setLive(false);\n    setTime(0);\n    setBombCounter(NO_OF_BOMBS)\n    setCells(generateCells(MAX_ROWS, MAX_COLS, NO_OF_BOMBS));\n    setHasLost(false);\n    setHasWon(false);\n  };\n\n\n\n  // useEffects to check the status of the game, timer, has win and has lost\n  useEffect(() => {\n    if (live && time < 999) {\n      const timer = setInterval(() => {\n        setTime(time + 1);\n      }, 1000);\n\n      return () => {\n        clearInterval(timer);\n      };\n    }\n  }, [live, time]);\n\n  useEffect(() => {\n    if (hasLost) {\n      setLive(false);\n      setFace(Face.lost);\n    }\n  }, [hasLost]);\n\n  useEffect(() => {\n    if (hasWon) {\n      setLive(false);\n      setFace(Face.won);\n    }\n  }, [hasWon]);\n\n\n  const handleClick = (rowParam: number, colParam: number) =>(): void =>{\n    let newCells = cells.slice();\n    //start game\n    if (!live){\n        setLive(true)\n    }\n\n    const currentCell = newCells[rowParam][colParam];\n\n    // 1. if a flagged cell or already revealed cell is clicked -> do nothing\n    if ([CellState.flagged, CellState.visible].includes(currentCell.state) || hasLost ) {\n      return;\n    }\n\n\n    // 2. if cell with  bomb is clicked -> game over\n    if (currentCell.value === CellValue.bomb) {\n      setHasLost(true);\n      newCells[rowParam][colParam].red = true;\n      newCells = showAllBombs();\n      setCells(newCells);\n      return;\n\n    // 3. if empty is clicked -> reveal all empty cells\n    } else if (currentCell.value === CellValue.none) {\n      newCells = openMultipleCells(newCells, rowParam, colParam, MAX_ROWS, MAX_COLS);\n    } else {\n    \n    // 4. if a number is clicked -> reveal the number\n      newCells[rowParam][colParam].state = CellState.visible;\n    }\n\n    // Check if you have won (no more open empty/number cells to click)\n    let safeOpenCellsExist = false;\n    for (let row = 0; row < MAX_ROWS; row++) {\n      for (let col = 0; col < MAX_COLS; col++) {\n        const currentCell = newCells[row][col];\n\n        if (\n          currentCell.value !== CellValue.bomb &&\n          currentCell.state === CellState.open\n        ) {\n          safeOpenCellsExist = true;\n          break;\n        }\n      }\n    }\n\n    if (!safeOpenCellsExist) {\n      // fill up all the left cells with flag to show victory\n      newCells = newCells.map(row =>\n        row.map(cell => {\n          if (cell.value === CellValue.bomb) {\n            return {\n              ...cell,\n              state: CellState.flagged\n            };\n          }\n          return cell;\n        })\n      );\n      setHasWon(true);\n    }\n\n    setCells(newCells);\n  };\n\n  \n// handle RIGHT CLICK -> set flags ðŸš© \nconst handleCellContext = (\n    rowParam: number,\n    colParam: number\n) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void => { \n    e.preventDefault() //to stop the rightclick menu from opening \n\n    // if the game is not started it doesn't allow to put flags\n    if (!live){\n        return\n    }\n\n    const currentCells = cells.slice();\n    const currentCell = cells[rowParam][colParam];\n\n    \n\n    // 1. if content cell revealed, do nothing\n    if (currentCell.state === CellState.visible) {\n        return;\n\n    // 2. if content cell still hidden, add a flag\n    } else if (currentCell.state === CellState.open) {\n\n        if (bombCounter > 0){\n            currentCells[rowParam][colParam].state = CellState.flagged;\n            setCells(currentCells);\n            setBombCounter(bombCounter - 1);\n        }\n        return\n\n    // 3. if cell is flagged, the flag is removed\n    } else if (currentCell.state === CellState.flagged) {\n        if (bombCounter < NO_OF_BOMBS){\n            currentCells[rowParam][colParam].state = CellState.open;\n            setCells(currentCells);\n            setBombCounter(bombCounter + 1);\n        }\n        return\n        \n      }\n}\n\n\n  // Create matrix\nconst renderCells = (): React.ReactNode => {\nreturn cells.map((row, rowIndex) => row.map((cell, colIndex)=> <Button\n    col={colIndex}\n    key={`${rowIndex}-${colIndex}`}\n    row={rowIndex}\n    state={cell.state}\n    value={cell.value}\n    onClick={handleClick}\n    onContext={handleCellContext}\n    red={cell.red}\n/>))\n}\n\n  // Show all bombs on game over mapping through cells in matrix\nconst showAllBombs = (): Cell[][] => {\n  const currentCells = cells.slice();\n  return currentCells.map(row =>\n    row.map(cell => {\n      if (cell.value === CellValue.bomb) {\n        return {\n          ...cell,\n          state: CellState.visible\n        };\n      }\n\n      return cell;\n    })\n  );\n}\n\n\n\n\n\nreturn {\n    bombCounter,\n    handleFaceClick,\n    face,\n    time,\n    renderCells,\n    classBody\n}\n}","/Users/debbie/IronhackLab/Projects/minesweeper/src/components/GameBoard/index.tsx",[],"/Users/debbie/IronhackLab/Projects/minesweeper/src/components/Navbar/index.tsx",[],"/Users/debbie/IronhackLab/Projects/minesweeper/src/components/Menu/index.tsx",[],"/Users/debbie/IronhackLab/Projects/minesweeper/src/components/context/GameContext.tsx",["59"],"import React, { createContext, useState, useContext, useEffect } from \"react\";\nimport {GameContextType, Props} from \"../../types\"\n\n\nconst GameContext = createContext<GameContextType | undefined >(undefined)\n\n\nexport const GameWrapper =({ children }: Props) =>{\n  const [isMenuVisible, setIsMenuVisible] = useState(false);\n  const [level, setLevel] = useState(\"beginner\")\n \n\n  return (\n    <GameContext.Provider value={{isMenuVisible, setIsMenuVisible, level, setLevel}}>\n      {children}\n    </GameContext.Provider>\n  );\n}\n\n//Creating a custom hook for consuming the context\nexport const useGameContext = () => useContext(GameContext);\n",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"60","replacedBy":"64"},{"ruleId":"62","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":72,"column":6,"nodeType":"68","endLine":72,"endColumn":19,"suggestions":"69"},{"ruleId":"70","severity":1,"message":"71","line":1,"column":54,"nodeType":"72","messageId":"73","endLine":1,"endColumn":63},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],["74"],["75"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cells' and 'handleFaceClick'. Either include them or remove the dependency array.","ArrayExpression",["76"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},"Update the dependencies array to be: [NO_OF_BOMBS, cells, handleFaceClick]",{"range":"79","text":"80"},[2158,2171],"[NO_OF_BOMBS, cells, handleFaceClick]"]